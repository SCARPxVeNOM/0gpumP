const { ethers } = require('hardhat');
const fs = require('fs');
const path = require('path');

async function main() {
  console.log('🚀 Deploying core DEX (WETH9, Factory, Router) to 0G testnet...');

  const [deployer] = await ethers.getSigners();
  console.log('Deployer:', await deployer.getAddress());
  console.log('Balance:', ethers.formatEther(await deployer.provider.getBalance(await deployer.getAddress())));

  // Deploy WETH9
  console.log('\n📦 Deploying WETH9...');
  const WETH = await ethers.getContractFactory('WETH9');
  const weth = await WETH.deploy();
  await weth.waitForDeployment();
  console.log('WETH9:', await weth.getAddress());

  // Deploy Factory
  console.log('\n🏭 Deploying UniswapV2Factory...');
  const Factory = await ethers.getContractFactory('UniswapV2Factory');
  const factory = await Factory.deploy(await deployer.getAddress());
  await factory.waitForDeployment();
  console.log('Factory:', await factory.getAddress());

  // Deploy Router
  console.log('\n🔄 Deploying UniswapV2Router02...');
  const Router = await ethers.getContractFactory('UniswapV2Router02');
  const router = await Router.deploy(await factory.getAddress(), await weth.getAddress());
  await router.waitForDeployment();
  console.log('Router:', await router.getAddress());

  // Persist addresses
  const config = {
    factoryAddress: await factory.getAddress(),
    routerAddress: await router.getAddress(),
    wethAddress: await weth.getAddress(),
    network: '0g-galileo-testnet',
    deployerAddress: await deployer.getAddress(),
    deploymentTime: new Date().toISOString()
  };

  fs.writeFileSync('deployment-config.json', JSON.stringify(config, null, 2));
  console.log('\n📝 Saved deployment-config.json');

  const frontendConfig = `
// Auto-generated by deployCoreDEX.js
export const TRADING_CONFIG = {
  FACTORY_ADDRESS: '${await factory.getAddress()}',
  ROUTER_ADDRESS: '${await router.getAddress()}',
  WETH_ADDRESS: '${await weth.getAddress()}',
  AUTO_TRADING_FACTORY_ADDRESS: '${process.env.AUTO_TRADING_FACTORY_ADDRESS || ''}',
  NETWORK: '0g-galileo-testnet',
  RPC_URL: 'https://evmrpc-testnet.0g.ai',
  CHAIN_ID: 16602
};
`;
  fs.writeFileSync(path.join('lib', 'trading-config.ts'), frontendConfig);
  console.log('🎨 Updated lib/trading-config.ts');

  console.log('\n✅ Core DEX deployed. Use these addresses in scripts to add liquidity.');
}

main().catch((e) => { console.error(e); process.exit(1); });


